<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>projects</key>
	<array>
		<dict>
			<key>cells</key>
			<array>
				<dict>
					<key>class</key>
					<string>detail</string>
					<key>detail</key>
					<string>iOS</string>
					<key>title</key>
					<string>Platform</string>
				</dict>
				<dict>
					<key>class</key>
					<string>detail</string>
					<key>detail</key>
					<string>Tweak</string>
					<key>title</key>
					<string>Kind</string>
				</dict>
				<dict>
					<key>class</key>
					<string>link</string>
					<key>detail</key>
					<string>alexzielenski/Zeppelin</string>
					<key>title</key>
					<string>Source</string>
					<key>url</key>
					<string>http://github.com/alexzielenski/Zeppelin</string>
				</dict>
				<dict>
					<key>class</key>
					<string>detail</string>
					<key>title</key>
					<string>Downloads</string>
					<key>detail</key>
					<string>17,583,160</string>
				</dict>
				<dict>
					<key>class</key>
					<string>text</string>
					<key>detail</key>
					<string>Zeppelin is a tweak for jailbroken iOS devices to theme carrier logos. It is available in the ModMyI Repository on Cydia and it is free and open source.   I first started making Zeppelin in January 2012 and released it January 31st, 2012. It has since become a staple of jailbreaking and can be found installed on most user&apos;s iPhones or iPads with thousands of Carrier Logo packs avaialble in Cydia.</string>
					<key>title</key>
					<string>Description</string>
				</dict>
				<dict>
					<key>class</key>
					<string>carousel</string>
					<key>detail</key>
					<array>
						<dict>
							<key>image</key>
							<string>Zeppelin1</string>
							<key>name</key>
							<string></string>
						</dict>
						<dict>
							<key>image</key>
							<string>Zeppelin2</string>
							<key>name</key>
							<string></string>
						</dict>
						<dict>
							<key>image</key>
							<string>Zeppelin3</string>
							<key>name</key>
							<string></string>
						</dict>
						<dict>
							<key>image</key>
							<string>Zeppelin4</string>
							<key>name</key>
							<string></string>
						</dict>
						<dict>
							<key>image</key>
							<string>Zeppelin5</string>
							<key>name</key>
							<string></string>
						</dict>
					</array>
					<key>title</key>
					<string>Gallery</string>
				</dict>
			</array>
			<key>image</key>
			<string>ZeppelinHeader</string>
			<key>title</key>
			<string></string>
			<key>off</key>
			<string></string>
			<key>on</key>
			<string></string>
		</dict>
		<dict>
			<key>cells</key>
			<array>
				<dict>
					<key>class</key>
					<string>detail</string>
					<key>detail</key>
					<string>OS X</string>
					<key>title</key>
					<string>Platform</string>
				</dict>
				<dict>
					<key>class</key>
					<string>detail</string>
					<key>detail</key>
					<string>Application</string>
					<key>title</key>
					<string>Kind</string>
				</dict>
				<dict>
					<key>class</key>
					<string>link</string>
					<key>detail</key>
					<string>alexzielenski/Mousecape</string>
					<key>title</key>
					<string>Source</string>
					<key>url</key>
					<string>http://github.com/alexzielensik/Mousecape</string>
				</dict>
				<dict>
					<key>class</key>
					<string>text</string>
					<key>detail</key>
					<string>Mousecape is one of my projects of which I am most proud. I created it to allow users to customize their mouse cursors into custom images. The application itself includes a library with which allows users to preview, create and apply their own &quot;capes&quot; or share caps for their friends or the world to use.</string>
					<key>title</key>
					<string>Description</string>
				</dict>
				<dict>
					<key>class</key>
					<string>text</string>
					<key>detail</key>
					<string>Under the hood, Mousecape uses a command line tool I wrote called &quot;mousecloak&quot; which manipulates private CoreGraphics APIs which I had reverse engineered to show custom images for default cursors without needing to inject a library anywhere.</string>
					<key>title</key>
					<string>How it works</string>
				</dict>
				<dict>
					<key>class</key>
					<string>carousel</string>
					<key>detail</key>
					<array>
						<dict>
							<key>image</key>
							<string>Mousecape1</string>
							<key>name</key>
							<string></string>
						</dict>
						<dict>
							<key>image</key>
							<string>Mousecape2</string>
							<key>name</key>
							<string></string>
						</dict>
						<dict>
							<key>image</key>
							<string>Mousecape3</string>
							<key>name</key>
							<string></string>
						</dict>
						<dict>
							<key>image</key>
							<string>Mousecape4</string>
							<key>name</key>
							<string></string>
						</dict>
						<dict>
							<key>image</key>
							<string>Mousecape5</string>
							<key>name</key>
							<string></string>
						</dict>
						<dict>
							<key>image</key>
							<string>Mousecape6</string>
							<key>name</key>
							<string></string>
						</dict>
					</array>
					<key>title</key>
					<string>Gallery</string>
				</dict>
			</array>
			<key>image</key>
			<string>MousecapeHeader</string>
			<key>title</key>
			<string></string>
			<key>off</key>
			<string></string>
			<key>on</key>
			<string></string>
		</dict>
		<dict>
			<key>cells</key>
			<array>
				<dict>
					<key>class</key>
					<string>detail</string>
					<key>detail</key>
					<string>OS X</string>
					<key>title</key>
					<string>Platform</string>
				</dict>
				<dict>
					<key>class</key>
					<string>detail</string>
					<key>detail</key>
					<string>Command Line Tool</string>
					<key>title</key>
					<string>Kind</string>
				</dict>
				<dict>
					<key>class</key>
					<string>link</string>
					<key>detail</key>
					<string>alexzielenski/optool</string>
					<key>title</key>
					<string>Source</string>
					<key>url</key>
					<string>http://github.com/alexzielenski/optool</string>
				</dict>
				<dict>
					<key>class</key>
					<string>text</string>
					<key>detail</key>
					<string>optool is something I made to allow developers to link libraries to their executables post-build. It also enables removal of linkages, removal of aslr, removal of code signatures, and removal of __RESTRICT segments on binaries.  I created optool for myself so I could insert a dylib into Foundation and in turn have most processes on my system &quot;injected&quot; with a library to get an ad-hoc CydiaSubstrate-like injection platform for myself so that I could build tweaks for OS X.</string>
					<key>title</key>
					<string>Description</string>
				</dict>
			</array>
			<key>image</key>
			<string>optoolHeader</string>
			<key>title</key>
			<string></string>
			<key>off</key>
			<string></string>
			<key>on</key>
			<string></string>
		</dict>
		<dict>
			<key>cells</key>
			<array>
				<dict>
					<key>class</key>
					<string>detail</string>
					<key>detail</key>
					<string>iOS</string>
					<key>title</key>
					<string>Platform</string>
				</dict>
				<dict>
					<key>class</key>
					<string>detail</string>
					<key>detail</key>
					<string>Tweak</string>
					<key>title</key>
					<string>Kind</string>
				</dict>
				<dict>
					<key>class</key>
					<string>link</string>
					<key>detail</key>
					<string>alexzielenski/TinyBar</string>
					<key>title</key>
					<string>Source</string>
					<key>url</key>
					<string>http://github.com/alexzielenski/TinyBar</string>
				</dict>
				<dict>
					<key>class</key>
					<string>detail</string>
					<key>title</key>
					<string>Downloads</string>
					<key>detail</key>
					<string>1,023,864</string>
				</dict>
				<dict>
					<key>class</key>
					<string>text</string>
					<key>title</key>
					<string>Description</string>
					<key>detail</key>
					<string>TinyBar is another iOS Tweak for jailbroken devices. It allows users to give their notifications the height of a status bar. TinyBar features a marquee for scrolling text and settings for fonts and sizes. It came about after iOS 7 introduced a new style of notification banner which I felt was too intrusive, so I changed it, open-sourced my code, and released TinyBar for free.</string>
				</dict>
				<dict>
					<key>class</key>
					<string>carousel</string>
					<key>detail</key>
					<array>
						<dict>
							<key>image</key>
							<string>TinyBar1</string>
							<key>name</key>
							<string></string>
						</dict>
						<dict>
							<key>image</key>
							<string>TinyBar2</string>
							<key>name</key>
							<string></string>
						</dict>
						<dict>
							<key>image</key>
							<string>TinyBar3</string>
							<key>name</key>
							<string></string>
						</dict>
						<dict>
							<key>image</key>
							<string>TinyBar4</string>
							<key>name</key>
							<string></string>
						</dict>
						<dict>
							<key>image</key>
							<string>TinyBar5</string>
							<key>name</key>
							<string></string>
						</dict>
						<dict>
							<key>image</key>
							<string>TinyBar6</string>
							<key>name</key>
							<string></string>
						</dict>
						<dict>
							<key>image</key>
							<string>TinyBar7</string>
							<key>name</key>
							<string></string>
						</dict>
					</array>
					<key>title</key>
					<string>Gallery</string>
				</dict>
			</array>
			<key>image</key>
			<string>TinyBarHeader</string>
			<key>title</key>
			<string></string>
			<key>off</key>
			<string></string>
			<key>on</key>
			<string></string>
		</dict>
		<dict>
			<key>cells</key>
			<array>
				<dict>
					<key>class</key>
					<string>detail</string>
					<key>detail</key>
					<string>OS X</string>
					<key>title</key>
					<string>Platform</string>
				</dict>
				<dict>
					<key>class</key>
					<string>detail</string>
					<key>detail</key>
					<string>Application</string>
					<key>title</key>
					<string>Kind</string>
				</dict>
				<dict>
					<key>class</key>
					<string>link</string>
					<key>detail</key>
					<string>alexzielenski/ThemeEngine</string>
					<key>title</key>
					<string>Source</string>
					<key>url</key>
					<string>http://github.com/alexzielenski/ThemeEngine</string>
				</dict>
				<dict>
					<key>class</key>
					<string>text</string>
					<key>detail</key>
					<string>ThemeEngine is an application for OS X which shows an easy-to-use interface for editing Apple&apos;s proprietary .car file format. Car files are used as the primary mechanism for which user interface assets are stored such as colors, styles, window gradients, button images, etc. on OS X and iOS.  ThemeEngine&apos;s main purpose is to allow users to create themes for OS X and iOS by customizing the car files directly and replacing the default system ones. It features export to/import from Photoshop support, an interactive gradient editor, style effect layer editing, and more.</string>
					<key>title</key>
					<string>Description</string>
				</dict>
				<dict>
					<key>class</key>
					<string>text</string>
					<key>detail</key>
					<string>First, I reverse-engineered the different elements of the car file format and then some of Apple&apos;s APIs for loading and storing the file so I could take shortcuts on writing to disk. There were many different formats to reverse for image assets, layer effects, gradients, and colors and it took the better part of a summer to get it all done, but now there are people finally back to theming OS X with a user-friendly tool.</string>
					<key>title</key>
					<string>How it works</string>
				</dict>
				<dict>
					<key>class</key>
					<string>carousel</string>
					<key>detail</key>
					<array>
						<dict>
							<key>image</key>
							<string>ThemeEngine1</string>
						</dict>
						<dict>
							<key>image</key>
							<string>ThemeEngine2</string>
						</dict>
						<dict>
							<key>image</key>
							<string>ThemeEngine3</string>
						</dict>
					</array>
				</dict>
			</array>
			<key>image</key>
			<string>ThemeEngineHeader</string>
			<key>title</key>
			<string></string>
			<key>off</key>
			<string></string>
			<key>on</key>
			<string></string>
		</dict>
	</array>
	<key>about</key>
	<array>
		<dict>
			<key>cells</key>
			<array>
				<dict>
					<key>title</key>
					<string>Name</string>
					<key>detail</key>
					<string>Alexander S. Zielenski</string>
					<key>class</key>
					<string>detail</string>
				</dict>
				<dict>
					<key>title</key>
					<string>Age</string>
					<key>detail</key>
					<string>19</string>
					<key>class</key>
					<string>detail</string>
				</dict>
				<dict>
					<key>detail</key>
					<string>The Dark Side by E-Dubble</string>
					<key>class</key>
					<string>link</string>
					<key>title</key>
					<string>Current Jam</string>
					<key>url</key>
					<string>https://open.spotify.com/track/1OCYw0njNENFpNXtQ8LTuS</string>
				</dict>
				<dict>
					<key>detail</key>
					<string>Cornell University Engineering &apos;18</string>
					<key>class</key>
					<string>detail</string>
					<key>title</key>
					<string>School</string>
				</dict>
				<dict>
					<key>detail</key>
					<string>Snowboarding at Killington, VT</string>
					<key>class</key>
					<string>detail</string>
					<key>title</key>
					<string>Hobby</string>
				</dict>
				<dict>
					<key>detail</key>
					<string>Most of my open source projects are based on things that I&apos;ve reverse-engineered. I love taking apart software, seeing how it works, and doing something totally different and unintended with it.   A fun application of this is to create libraries which allow users to customize their iOS and OS X devices to make them more personal, to restore a sense of self in a world of conformity.</string>
					<key>class</key>
					<string>text</string>
					<key>title</key>
					<string>Interests</string>
				</dict>
				<dict>
					<key>detail</key>
					<string>I have gained experience developing in C/Objective-C for 6 years and HTML/CSS/Javascript for 7 years along with several web frameworks and database technologies.</string>
					<key>class</key>
					<string>text</string>
					<key>title</key>
					<string>Skills</string>
				</dict>
				<dict>
					<key>class</key>
					<string>text</string>
					<key>detail</key>
					<string>My main goal at WWDC 2015 is to attend talks about the inner-workings of OS X and iOS and find out more about how these complex systems work together so I could one day help to build them.</string>
					<key>title</key>
					<string>Goal</string>
				</dict>
			</array>
			<key>image</key>
			<string>AboutHeader</string>
		</dict>
	</array>
	<key>work</key>
	<array>
		<dict>
			<key>cells</key>
			<array>
				<dict>
					<key>title</key>
					<string>Employer</string>
					<key>detail</key>
					<string>Cornell University</string>
					<key>class</key>
					<string>detail</string>
				</dict>
				<dict>
					<key>title</key>
					<string>Title</string>
					<key>detail</key>
					<string>Consultant for CS 2110</string>
					<key>class</key>
					<string>detail</string>
				</dict>
				<dict>
					<key>title</key>
					<string>Year</string>
					<key>detail</key>
					<string>2015</string>
					<key>class</key>
					<string>detail</string>
				</dict>
				<dict>
					<key>title</key>
					<string>Department</string>
					<key>detail</key>
					<string>Computer Science</string>
					<key>class</key>
					<string>detail</string>
				</dict>
				<dict>
					<key>title</key>
					<string>Description</string>
					<key>detail</key>
					<string>As a consultant for CS 2110, I have the responsibility of holding office hours during which I make myself available to students of CS 2110, Object Oriented Programming and Data Structures, to assist with any questions they might have or problems with homework. I am also responsible for grading homework, and proctoring and grading exams.  Being a teaching assistant, or consultant, is a very fulfilling job, especially at a place like my school, because I am able to learn by teaching, as in, I gain a better understanding of concepts by explaining them to other people many times over. It is also incredibly fulfilling to help a student get past a tough problem on his or her homework after hours of trying. I fully intend to continue being a teaching assistant in the years to come.</string>
					<key>class</key>
					<string>text</string>
				</dict>
			</array>
			<key>image</key>
			<string>CornellHeader</string>
		</dict>
		<dict>
			<key>cells</key>
			<array>
				<dict>
					<key>title</key>
					<string>Employer</string>
					<key>detail</key>
					<string>Cornell App Development</string>
					<key>class</key>
					<string>detail</string>
				</dict>
				<dict>
					<key>title</key>
					<string>Title</string>
					<key>detail</key>
					<string>Senior iOS Developer</string>
					<key>class</key>
					<string>detail</string>
				</dict>
				<dict>
					<key>title</key>
					<string>Year</string>
					<key>detail</key>
					<string>2014-2015</string>
					<key>class</key>
					<string>detail</string>
				</dict>
				<dict>
					<key>title</key>
					<string>Description</string>
					<key>detail</key>
					<string>CUAppDev, a project team in Cornell&apos;s College of Engineering, is a team dedicated to creating an app from start to finish through coordination between design and development teams.   Our first two apps are almost done and should be published during the summer.  We are just getting started so we&apos;ve yet to build a portfolio but I am excited for the future.</string>
					<key>class</key>
					<string>text</string>
				</dict>
			</array>
			<key>image</key>
			<string>CUAppDevHeader</string>
		</dict>
		<dict>
			<key>cells</key>
			<array>
				<dict>
					<key>title</key>
					<string>Employer</string>
					<key>detail</key>
					<string>Applied Business Systems</string>
					<key>class</key>
					<string>detail</string>
				</dict>
				<dict>
					<key>title</key>
					<string>Title</string>
					<key>detail</key>
					<string>Mobile and Web Developer</string>
					<key>class</key>
					<string>detail</string>
				</dict>
				<dict>
					<key>title</key>
					<string>Year</string>
					<key>detail</key>
					<string>Summers 2010-2013</string>
					<key>class</key>
					<string>detail</string>
				</dict>
				<dict>
					<key>title</key>
					<string>Description</string>
					<key>detail</key>
					<string>At ABS, I developed a billable hours timesheet entry for the employees of Applied Business Systems using EmberJS in Javascript backed by an Oracle database.  I also consulted on ways to architect web services and create mobile applications using web frameworks such as NodeJS and CocoaTouch, respectively.</string>
					<key>class</key>
					<string>text</string>
				</dict>
			</array>
			<key>image</key>
			<string>ABSHeader</string>
		</dict>
	</array>
</dict>
</plist>
